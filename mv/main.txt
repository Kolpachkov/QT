#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QTimer>
#include <QImage>
#include <QPixmap>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
    , calibrating(false)
{
    ui->setupUi(this);
    cap.open(0);  // Открываем камеру
    if (!cap.isOpened()) {
        ui->statusbar->showMessage("Не удалось открыть камеру.");
        return;
    }

    QTimer *timer = new QTimer(this);
    connect(timer, &QTimer::timeout, this, &MainWindow::processFrame);
    timer->start(30);  // Обновление кадров каждые 30 мс
}

MainWindow::~MainWindow()
{
    cap.release();
    delete ui;
}

void MainWindow::processFrame()
{
    cv::Mat frame;
    cap >> frame;
    if (frame.empty()) return;

    cv::Mat gray;
    cv::cvtColor(frame, gray, cv::COLOR_BGR2GRAY);

    std::vector<cv::Point2f> corners;
    bool found = cv::findChessboardCorners(gray, cv::Size(9, 6), corners);

    if (found && calibrating) {
        cv::drawChessboardCorners(frame, cv::Size(9, 6), corners, found);
        objpoints.push_back(std::vector<cv::Point3f>());
        std::vector<cv::Point3f>& objp = objpoints.back();
        objp.resize(9 * 6);
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 9; ++j)
                objp[i * 9 + j] = cv::Point3f(j, i, 0);
        imgpoints.push_back(corners);
    }

    QImage qimg(frame.data, frame.cols, frame.rows, frame.step, QImage::Format_BGR888);
    ui->label->setPixmap(QPixmap::fromImage(qimg));
}

void MainWindow::on_startCalibration_clicked()
{
    calibrating = true;
    objpoints.clear();
    imgpoints.clear();
    ui->statusbar->showMessage("Калибровка начата...");
}

void MainWindow::on_stopCalibration_clicked()
{
    calibrating = false;
    if (objpoints.size() > 0) {
        calibrateCamera();
        ui->statusbar->showMessage("Калибровка завершена.");
    } else {
        ui->statusbar->showMessage("Не удалось найти углы шахматной доски для калибровки.");
    }
}

void MainWindow::calibrateCamera()
{
    cv::Mat frame;
    cap >> frame;
    if (frame.empty()) return;

    cv::Size frameSize(frame.cols, frame.rows);
    std::vector<cv::Mat> rvecs, tvecs;
    cv::calibrateCamera(objpoints, imgpoints, frameSize, cameraMatrix, distCoeffs, rvecs, tvecs);

    // Сохранение параметров калибровки
    cv::FileStorage fs("calibration_params.yml", cv::FileStorage::WRITE);
    fs << "cameraMatrix" << cameraMatrix << "distCoeffs" << distCoeffs;
    fs.release();
}

void MainWindow::on_showUndistorted_clicked()
{
    showUndistorted();
}

void MainWindow::showUndistorted()
{
    cv::Mat frame;
    cap >> frame;
    if (frame.empty()) return;

    cv::Mat undistorted;
    cv::undistort(frame, undistorted, cameraMatrix, distCoeffs);

    QImage qimg(undistorted.data, undistorted.cols, undistorted.rows, undistorted.step, QImage::Format_BGR888);
    ui->label->setPixmap(QPixmap::fromImage(qimg));
}